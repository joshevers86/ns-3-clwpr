/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 Konstantinos Katsaros
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Authors: Konstantinos Katsaros <K.Katsaros@surrey.ac.uk>
 *
 */

/// \brief	This header file declares and defines internal state of an CLWPR node.

#ifndef __CLWPR_STATE_H__
#define __CLWPR_STATE_H__

#include "clwpr-repositories.h"

namespace ns3 {

using namespace clwpr;

/// This class encapsulates all data structures needed for maintaining internal state of an CLWPR node.
class ClwprState
{
  //  friend class Clwpr;
  
protected:
//  LinkSet m_linkSet;
  NeighborSet m_neighborSet;		

  DuplicateSet m_duplicateSet;	///< Duplicate Set (RFC 3626, section 3.4).

  AssociationSet m_associationSet; ///<	Association Set (RFC 3626, section12.2). Associations obtained from HNA messages generated by other nodes.
  IfaceAssocSet m_ifaceAssocSet;
  Associations m_associations;	///< The node's local Host Network Associations that will be advertised using HNA messages.
  PosAssociationSet m_posAssociationSet; ///< The nodes local IP-Position Association set;;

public:

  ClwprState ()
  {}
  

  // Neighbor
  const NeighborSet & GetNeighbors () const
  {
    return m_neighborSet;
  }
  NeighborSet & GetNeighbors ()
  {
    return m_neighborSet;
  }
  NeighborTuple* FindNeighborTuple (const Ipv4Address &mainAddr);
  const NeighborTuple* FindSymNeighborTuple (const Ipv4Address &mainAddr) const;
  NeighborTuple* FindNeighborTuple (const Ipv4Address &mainAddr,
                                    uint8_t willingness);
  void EraseNeighborTuple (const NeighborTuple &neighborTuple);
  void EraseNeighborTuple (const Ipv4Address &mainAddr);
  void InsertNeighborTuple (const NeighborTuple &tuple);


  // Duplicate
  DuplicateTuple* FindDuplicateTuple (const Ipv4Address &address,
                                      uint16_t sequenceNumber);
  void EraseDuplicateTuple (const DuplicateTuple &tuple);
  void InsertDuplicateTuple (const DuplicateTuple &tuple);


  // Interface association
  const IfaceAssocSet & GetIfaceAssocSet () const
  {
    return m_ifaceAssocSet;
  }
  IfaceAssocSet & GetIfaceAssocSetMutable ()
  {
    return m_ifaceAssocSet;
  }
  IfaceAssocTuple* FindIfaceAssocTuple (const Ipv4Address &ifaceAddr);
  const IfaceAssocTuple* FindIfaceAssocTuple (const Ipv4Address &ifaceAddr) const;
  void EraseIfaceAssocTuple (const IfaceAssocTuple &tuple);
  void InsertIfaceAssocTuple (const IfaceAssocTuple &tuple);

  // Host-Network Association
  const AssociationSet & GetAssociationSet () const  // Associations known to the node
  {
    return m_associationSet;
  }

  const Associations & GetAssociations () const  // Set of associations that the node has
  {
    return m_associations;
  }

  AssociationTuple* FindAssociationTuple (const Ipv4Address &gatewayAddr,\
					  const Ipv4Address &networkAddr,\
					  const Ipv4Mask &netmask);
  void EraseAssociationTuple (const AssociationTuple &tuple);
  void InsertAssociationTuple (const AssociationTuple &tuple);
  void EraseAssociation (const Association &tuple);
  void InsertAssociation (const Association &tuple);

  // Returns a vector of all interfaces of a given neighbor, with the
  // exception of the "main" one.
  std::vector<Ipv4Address>
  FindNeighborInterfaces (const Ipv4Address &neighborMainAddr) const;


  // Position Association
  const PosAssociationSet & GetPosAssociationSet () const  // Associations known to the node
  {
    return m_posAssociationSet;
  }
  // Position Association Initialise
  void InitPosAssociationSet ();
  PosAssociationTuple* FindPosAssociationTuple (const Ipv4Address &nodeMainAddr);
  void ErasePosAssociationTuple (const PosAssociationTuple &tuple);
  void InsertPosAssociationTuple (const PosAssociationTuple &tuple);
};

} // namespace ns3

#endif
